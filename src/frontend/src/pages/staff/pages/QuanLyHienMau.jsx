import React, { useEffect, useState } from 'react';
import axios from 'axios';
import BloodAdditionDashboard from '../../../components/BloodAdditionDashboard/BloodAdditionDashboard';
import OnSiteDonation from '../../../components/OnSiteDonation/OnSiteDonation';
import './QuanLyHienMau.css';

function hasPermission(requiredType) {
  const allowed = JSON.parse(localStorage.getItem('allowedTaskTypes') || '[]');
  console.log('allowedTaskTypes from localStorage:', allowed);
  console.log('Checking permission for:', requiredType);

  // Map blood_collection to QuanLyHienMau permission
  if (requiredType === 'QuanLyHienMau') {
    const hasPermission = allowed.includes('blood_collection');
    console.log('Has QuanLyHienMau permission:', hasPermission);
    return hasPermission;
  }
  return allowed.includes(requiredType);
}

// Component hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng c√≥ quy·ªÅn
function NoPermissionMessage() {
  return (
    <div style={{
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
      height: '60vh',
      textAlign: 'center',
      padding: '20px'
    }}>
      <div style={{
        fontSize: '64px',
        marginBottom: '20px'
      }}>üö´</div>
      <h2 style={{
        color: '#dc3545',
        marginBottom: '10px'
      }}>Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h2>
      <p style={{
        color: '#666',
        fontSize: '16px',
        maxWidth: '500px',
        lineHeight: '1.6'
      }}>
        B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang qu·∫£n l√Ω hi·∫øn m√°u.
        Trang n√†y ch·ªâ d√†nh cho nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng c√¥ng vi·ªác qu·∫£n l√Ω hi·∫øn m√°u v√† thu th·∫≠p m√°u.
      </p>
      <p style={{
        color: '#888',
        fontSize: '14px',
        marginTop: '10px'
      }}>
        Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c c·∫•p quy·ªÅn truy c·∫≠p.
      </p>
    </div>
  );
}

function QuanLyHienMau() {
  const [donationDates, setDonationDates] = useState([]);
  const [selectedDate, setSelectedDate] = useState(null);
  const [donors, setDonors] = useState([]);

  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedDonor, setSelectedDonor] = useState(null);
  const [editForm, setEditForm] = useState({
    full_name: '',
    email: '',
    phone: '',
    address: '',
    blood_group_id: ''
  });
  const [editFormErrors, setEditFormErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // State cho Blood Addition Dashboard
  const [showBloodDashboard, setShowBloodDashboard] = useState(false);
  const [selectedDonorForBlood, setSelectedDonorForBlood] = useState(null);
  const [bloodMessage, setBloodMessage] = useState('');

  // State cho tabs
  const [activeTab, setActiveTab] = useState('appointments'); // 'appointments' ho·∫∑c 'on-site'

  // State cho t√¨m ki·∫øm ng√†y
  const [searchFromDate, setSearchFromDate] = useState('');
  const [searchToDate, setSearchToDate] = useState('');
  const [isSearching, setIsSearching] = useState(false);

  const bloodGroups = [
    { id: 1, label: 'A+' }, { id: 2, label: 'A-' },
    { id: 3, label: 'B+' }, { id: 4, label: 'B-' },
    { id: 5, label: 'AB+' }, { id: 6, label: 'AB-' },
    { id: 7, label: 'O+' }, { id: 8, label: 'O-' }
  ];

  // Check permission - if no permission, show message
  if (!hasPermission('QuanLyHienMau')) {
    return <NoPermissionMessage />;
  }

  useEffect(() => {
    console.log('QuanLyHienMau component mounted');
    console.log('Permission granted, fetching data...');
    fetchDonationDates();
  }, []);

  // useEffect ƒë·ªÉ theo d√µi thay ƒë·ªïi search dates v√† set isSearching
  useEffect(() => {
    setIsSearching(searchFromDate !== '' || searchToDate !== '');
  }, [searchFromDate, searchToDate]);

  const fetchDonationDates = async () => {
    console.log('Fetching donation dates...');
    try {
      const res = await axios.get('http://localhost:3001/api/appointments/donation-dates');
      const data = res.data;
      console.log('API Response:', data);
      setDonationDates(Array.isArray(data) ? data.sort((a, b) => new Date(a.donation_date) - new Date(b.donation_date)) : []);
    } catch (err) {
      console.error('L·ªói l·∫•y danh s√°ch ng√†y hi·∫øn m√°u:', err);
      console.error('Error details:', err.response?.data, err.response?.status);
    }
  };

  const handleViewDonors = async (date) => {
    // Check permission before viewing donors
    if (!hasPermission('QuanLyHienMau')) {
      return;
    }

    try {
      const res = await axios.get(`http://localhost:3001/api/appointments/donors-by-date/${date}`);
      setSelectedDate(date);
      setDonors(res.data);
    } catch (err) {
      console.error('L·ªói l·∫•y ng∆∞·ªùi hi·∫øn m√°u:', err);
      setDonors([]);
    }
  };

  const handleBack = () => {
    setSelectedDate(null);
    setDonors([]);
    // Kh√¥ng reset t√¨m ki·∫øm khi quay l·∫°i ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ ti·∫øp t·ª•c v·ªõi b·ªô l·ªçc hi·ªán t·∫°i
  };

  const openEditModal = (donor) => {
    setSelectedDonor(donor);
    setEditForm({
      full_name: donor.full_name || '',
      email: donor.email || '',
      phone: donor.phone || '',
      address: donor.address || '',
      blood_group_id: donor.blood_group_id || ''
    });
    setEditFormErrors({});
    setShowEditModal(true);
  };

  const validateEditForm = () => {
    const errors = {};

    if (!editForm.full_name?.trim()) errors.full_name = 'H·ªç t√™n l√† b·∫Øt bu·ªôc';
    if (!editForm.email?.trim()) errors.email = 'Email l√† b·∫Øt bu·ªôc';
    if (!editForm.phone?.trim()) errors.phone = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
    if (!editForm.address?.trim()) errors.address = 'ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc';
    if (!editForm.blood_group_id) errors.blood_group_id = 'Nh√≥m m√°u l√† b·∫Øt bu·ªôc';

    setEditFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const submitEditDonor = async () => {
    if (!validateEditForm()) {
      return;
    }

    if (!hasPermission('QuanLyHienMau')) {
      return;
    }

    setIsSubmitting(true);

    try {
      await axios.put(`http://localhost:3001/api/donors/${selectedDonor.donor_id}`, editForm);
      // Refresh donor list
      if (selectedDate) {
        handleViewDonors(selectedDate);
      }
      setShowEditModal(false);
    } catch (err) {
      console.error('L·ªói c·∫≠p nh·∫≠t th√¥ng tin:', err);
      alert('L·ªói c·∫≠p nh·∫≠t th√¥ng tin: ' + (err.response?.data?.error || err.message));
    } finally {
      setIsSubmitting(false);
    }
  };

  // Functions cho Blood Addition Dashboard
  const handleCloseBloodDashboard = () => {
    setShowBloodDashboard(false);
    setSelectedDonorForBlood(null);
  };

  const handleBloodAdditionSuccess = (successMessage) => {
    setBloodMessage(successMessage);
    // Refresh donor list
    if (selectedDate) {
      handleViewDonors(selectedDate);
    }
    setTimeout(() => setBloodMessage(''), 5000);
  };

  const handleCompleteDonation = async (donorId) => {
    // Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t tr·∫°ng th√°i ngay - s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong BloodAdditionDashboard
    // T·ª± ƒë·ªông m·ªü dashboard ƒë·ªÉ th√™m m√°u
    setSelectedDonorForBlood(donorId);
    setShowBloodDashboard(true);
    setBloodMessage('Vui l√≤ng ch·ªçn th√†nh ph·∫ßn m√°u v√† dung t√≠ch ƒë·ªÉ ho√†n th√†nh hi·∫øn m√°u.');
  };

  // Function ƒë·ªÉ l·ªçc ng√†y theo t√¨m ki·∫øm
  const getFilteredDonationDates = () => {
    let filtered = donationDates.filter(item => {
      // L·∫•y ng√†y hi·ªán t·∫°i (b·ªè ph·∫ßn gi·ªù ph√∫t gi√¢y)
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const itemDate = new Date(item.donation_date);
      itemDate.setHours(0, 0, 0, 0);
      // Hi·ªÉn th·ªã t·ª´ ng√†y hi·ªán t·∫°i tr·ªü ƒëi (bao g·ªìm c·∫£ h√¥m nay)
      return itemDate >= today;
    });

    // √Åp d·ª•ng b·ªô l·ªçc t√¨m ki·∫øm n·∫øu c√≥
    if (searchFromDate || searchToDate) {
      filtered = filtered.filter(item => {
        const itemDate = new Date(item.donation_date);
        itemDate.setHours(0, 0, 0, 0);

        let matchesFrom = true;
        let matchesTo = true;

        if (searchFromDate) {
          const fromDate = new Date(searchFromDate);
          fromDate.setHours(0, 0, 0, 0);
          matchesFrom = itemDate >= fromDate;
        }

        if (searchToDate) {
          const toDate = new Date(searchToDate);
          toDate.setHours(23, 59, 59, 999);
          matchesTo = itemDate <= toDate;
        }

        return matchesFrom && matchesTo;
      });
    }

    return filtered;
  };

  // Function ƒë·ªÉ reset t√¨m ki·∫øm
  const resetSearch = () => {
    setSearchFromDate('');
    setSearchToDate('');
    // isSearching s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông set th√†nh false th√¥ng qua useEffect
  };

  // Function ƒë·ªÉ handle thay ƒë·ªïi ng√†y t√¨m ki·∫øm
  const handleFromDateChange = (e) => {
    setSearchFromDate(e.target.value);
  };

  const handleToDateChange = (e) => {
    const toDate = e.target.value;
    setSearchToDate(toDate);

    // N·∫øu ch∆∞a c√≥ "t·ª´ ng√†y" v√† ƒë√£ ch·ªçn "ƒë·∫øn ng√†y", t·ª± ƒë·ªông set "t·ª´ ng√†y" l√† h√¥m nay
    if (!searchFromDate && toDate) {
      const today = new Date().toISOString().split('T')[0];
      setSearchFromDate(today);
    }
  };

  // L·∫•y ng√†y hi·ªán t·∫°i ƒë·ªÉ l√†m min date
  const today = new Date().toISOString().split('T')[0];

  return (
    <div className="container">
      {/* Tab Navigation */}
      <div className="tab-navigation">
        <button
          className={`tab-button ${activeTab === 'appointments' ? 'active' : ''}`}
          onClick={() => setActiveTab('appointments')}
        >
          üìÖ Qu·∫£n l√Ω l·ªãch h·∫πn hi·∫øn m√°u
        </button>
        <button
          className={`tab-button ${activeTab === 'on-site' ? 'active' : ''}`}
          onClick={() => setActiveTab('on-site')}
        >
          ü©∏ Hi·∫øn m√°u t·∫°i ch·ªó
        </button>
      </div>

      {/* Tab Content */}
      {activeTab === 'appointments' && (
        <div className="tab-content">
          {!selectedDate ? (
            <>
              <div className="page-title">
                <h2>Danh s√°ch c√°c ng√†y c√≥ l·ªãch hi·∫øn m√°u</h2>
              </div>

              {/* Search Date Range */}
              <div className="date-search-container">
                <span>üìÖ T√¨m ki·∫øm theo kho·∫£ng th·ªùi gian:</span>

                <div className="date-search-wrapper">
                  <div className="date-input-group">
                    <label>T·ª´ ng√†y</label>
                    <input
                      type="date"
                      value={searchFromDate}
                      onChange={handleFromDateChange}
                      min={today}
                    />
                  </div>

                  <div className="date-input-group">
                    <label>ƒê·∫øn ng√†y</label>
                    <input
                      type="date"
                      value={searchToDate}
                      onChange={handleToDateChange}
                      min={searchFromDate || today}
                    />
                  </div>

                  {(searchFromDate || searchToDate) && (
                    <button
                      onClick={resetSearch}
                      className="reset-search-btn"
                    >
                      ƒê·∫∑t l·∫°i
                    </button>
                  )}
                </div>
              </div>

              {/* Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm */}
              {isSearching && (
                <div className="search-results-info">
                  <div className="search-results-badge">
                    T√¨m th·∫•y {getFilteredDonationDates().length} k·∫øt qu·∫£
                  </div>
                </div>
              )}

              <table className="appointment-table">
                <thead>
                  <tr>
                    <th>STT</th>
                    <th>Ng√†y hi·∫øn m√°u</th>
                    <th>H√†nh ƒë·ªông</th>
                  </tr>
                </thead>
                <tbody>
                  {getFilteredDonationDates().length === 0 ? (
                    <tr>
                      <td colSpan="3" className="no-results-message">
                        {isSearching ? (
                          <div>
                            <div>üîç Kh√¥ng t√¨m th·∫•y ng√†y hi·∫øn m√°u n√†o trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn</div>
                            <div className="sub-text">
                              H√£y th·ª≠ m·ªü r·ªông kho·∫£ng th·ªùi gian t√¨m ki·∫øm
                            </div>
                          </div>
                        ) : (
                          <div>üìÖ Ch∆∞a c√≥ l·ªãch hi·∫øn m√°u n√†o ƒë∆∞·ª£c ƒë·∫∑t</div>
                        )}
                      </td>
                    </tr>
                  ) : (
                    getFilteredDonationDates()
                      .map((item, index) => {
                        const donationDate = new Date(item.donation_date);
                        const today = new Date();

                        // Ch·ªâ so s√°nh ng√†y, kh√¥ng so s√°nh gi·ªù
                        donationDate.setHours(0, 0, 0, 0);
                        today.setHours(0, 0, 0, 0);

                        const isToday = donationDate.getTime() === today.getTime();

                        return (
                          <tr key={index}>
                            <td>{index + 1}</td>
                            <td>{item.donation_date?.slice(0, 10)}</td>
                            <td>
                              {isToday ? (
                                <button className="btn-view" onClick={() => handleViewDonors(item.donation_date)}>Xem</button>
                              ) : (
                                <span className={`status-text ${donationDate < today ? 'past' : 'future'}`}>
                                  {donationDate < today ? 'ƒê√£ qua' : 'Ch∆∞a ƒë·∫øn ng√†y'}
                                </span>
                              )}
                            </td>
                          </tr>
                        );
                      })
                  )}
                </tbody>
              </table>
            </>
          ) : (
            <>
              <h2>Ng∆∞·ªùi hi·∫øn m√°u ng√†y {new Date(selectedDate).toLocaleDateString('vi-VN')}</h2>
              <button className="btn-back" onClick={handleBack}>Quay l·∫°i</button>

              <div className="donor-table-wrapper">
                <table className="donor-table">
                  <thead>
                    <tr>
                      <th>T√™n</th>
                      <th>Email</th>
                      <th>ƒêi·ªán tho·∫°i</th>
                      <th>ƒê·ªãa ch·ªâ</th>
                      <th>Nh√≥m m√°u</th>
                      <th>Ng√†y hi·∫øn g·∫ßn nh·∫•t</th>
                      <th>Tr·∫°ng th√°i hi·∫øn m√°u</th>
                      <th>Gi·ªù h·∫πn</th>
                      <th>H√†nh ƒë·ªông</th>
                    </tr>
                  </thead>
                  <tbody>
                    {donors.map((donor, index) => (
                      <tr key={index}>
                        <td>{donor.full_name}</td>
                        <td>{donor.email}</td>
                        <td>{donor.phone}</td>
                        <td>{donor.address}</td>
                        <td>{donor.blood_group}</td>
                        <td>{donor.last_donation_date}</td>
                        <td>{donor.donation_status === 'donated' ? 'ƒê√£ hi·∫øn' : 'Ch∆∞a hi·∫øn'}</td>
                        <td>{donor.appointment_time} - {donor.appointment_time_end}</td>
                        <td>
                          <div className="action-buttons">
                            {/* N√∫t ho√†n th√†nh hi·∫øn m√°u cho donor c√≥ tr·∫°ng th√°i 'scheduled' */}
                            {donor.donation_status === 'scheduled' && (
                              <button
                                className="btn-complete-donation"
                                onClick={() => handleCompleteDonation(donor.donor_id)}
                              >
                                üéØ Ho√†n th√†nh hi·∫øn m√°u
                              </button>
                            )}

                            {/* Ch·ªâ hi·ªÉn th·ªã "ƒê√£ ho√†n th√†nh" cho nh·ªØng ng∆∞·ªùi ƒë√£ hi·∫øn m√°u */}
                            {donor.donation_status === 'donated' && (
                              <span className="completed-status" style={{ color: '#4caf50', fontWeight: 'bold' }}>
                                ‚úÖ ƒê√£ ho√†n th√†nh
                              </span>
                            )}

                            {/* N√∫t s·ª≠a th√¥ng tin (lu√¥n hi·ªÉn th·ªã) */}
                            <button onClick={() => openEditModal(donor)}>S·ª≠a th√¥ng tin</button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </>
          )}
        </div>
      )}

      {/* On-site Donation Tab */}
      {activeTab === 'on-site' && (
        <div className="tab-content">
          <OnSiteDonation />
        </div>
      )}

      {/* Modal c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi hi·∫øn m√°u */}
      {showEditModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h3>C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi hi·∫øn m√°u</h3>
            <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>
              <div>
                <label>H·ªç t√™n: <span style={{ color: 'red' }}>*</span></label>
                <input
                  type="text"
                  value={editForm.full_name}
                  onChange={e => setEditForm(f => ({ ...f, full_name: e.target.value }))}
                  style={{ borderColor: editFormErrors.full_name ? 'red' : '#ddd' }}
                />
                {editFormErrors.full_name && <span style={{ color: 'red', fontSize: '12px' }}>{editFormErrors.full_name}</span>}
              </div>

              <div>
                <label>Email: <span style={{ color: 'red' }}>*</span></label>
                <input
                  type="email"
                  value={editForm.email}
                  onChange={e => setEditForm(f => ({ ...f, email: e.target.value }))}
                  style={{ borderColor: editFormErrors.email ? 'red' : '#ddd' }}
                />
                {editFormErrors.email && <span style={{ color: 'red', fontSize: '12px' }}>{editFormErrors.email}</span>}
              </div>

              <div>
                <label>S·ªë ƒëi·ªán tho·∫°i: <span style={{ color: 'red' }}>*</span></label>
                <input
                  type="tel"
                  value={editForm.phone}
                  onChange={e => setEditForm(f => ({ ...f, phone: e.target.value }))}
                  style={{ borderColor: editFormErrors.phone ? 'red' : '#ddd' }}
                />
                {editFormErrors.phone && <span style={{ color: 'red', fontSize: '12px' }}>{editFormErrors.phone}</span>}
              </div>

              <div>
                <label>ƒê·ªãa ch·ªâ: <span style={{ color: 'red' }}>*</span></label>
                <textarea
                  value={editForm.address}
                  onChange={e => setEditForm(f => ({ ...f, address: e.target.value }))}
                  style={{ borderColor: editFormErrors.address ? 'red' : '#ddd' }}
                  rows={3}
                />
                {editFormErrors.address && <span style={{ color: 'red', fontSize: '12px' }}>{editFormErrors.address}</span>}
              </div>

              <div>
                <label>Nh√≥m m√°u: <span style={{ color: 'red' }}>*</span></label>
                <select
                  value={editForm.blood_group_id}
                  onChange={e => setEditForm(f => ({ ...f, blood_group_id: e.target.value }))}
                  style={{ borderColor: editFormErrors.blood_group_id ? 'red' : '#ddd' }}
                >
                  <option value="">Ch·ªçn nh√≥m m√°u</option>
                  {bloodGroups.map(group => (
                    <option key={group.id} value={group.id}>{group.label}</option>
                  ))}
                </select>
                {editFormErrors.blood_group_id && <span style={{ color: 'red', fontSize: '12px' }}>{editFormErrors.blood_group_id}</span>}
              </div>
            </div>

            <div style={{ marginTop: 16 }}>
              <button
                onClick={submitEditDonor}
                style={{ background: isSubmitting ? '#ccc' : '#f44336', color: 'white' }}
                disabled={isSubmitting}
              >
                {isSubmitting ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t'}
              </button>
              <button
                onClick={() => setShowEditModal(false)}
                style={{ marginLeft: 8, background: '#ccc' }}
                disabled={isSubmitting}
              >
                H·ªßy
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Blood Addition Dashboard */}
      {showBloodDashboard && (
        <BloodAdditionDashboard
          donorId={selectedDonorForBlood}
          onClose={handleCloseBloodDashboard}
          onSuccess={handleBloodAdditionSuccess}
        />
      )}

      {/* Message after blood addition */}
      {bloodMessage && (
        <div className="blood-message" style={{ marginTop: 16, color: 'green' }}>
          {bloodMessage}
        </div>
      )}
    </div>
  );
}

export default QuanLyHienMau;
