import React, { useState, useEffect } from 'react';
import LenLich from '../components/LenLich/LenLich';
import styles from '../styles/ScheduleManagement.module.css';

const ScheduleManagement = () => {
  // D·ªØ li·ªáu m·∫´u, sau n√†y thay b·∫±ng d·ªØ li·ªáu t·ª´ server
  const [schedules, setSchedules] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [editIndex, setEditIndex] = useState(null);

  // TODO: Nh·∫≠n d·ªØ li·ªáu t·ª´ backend khi component mount
  useEffect(() => {
    fetch('http://localhost:3001/api/appointments/list')
      .then(res => res.json())
      .then(data => {
        const filtered = data.map(item => ({
          appointment_id: item.appointment_id,
          appointment_date: item.appointment_date,
          appointment_time: item.appointment_time,
          appointment_time_end: item.appointment_time_end, // ƒê√∫ng t√™n tr∆∞·ªùng
          status: item.status,
          notes: item.notes
        }));
        setSchedules(filtered);
      })
      .catch(err => {
        console.error('L·ªói khi l·∫•y danh s√°ch l·ªãch:', err);
        setSchedules([]);
      });
  }, []);

  // Th√™m ho·∫∑c c·∫≠p nh·∫≠t l·ªãch m·ªõi
  const handleAddSchedule = () => {
    // ƒê√≥ng form
    setShowForm(false);
    setEditIndex(null);
    // G·ªçi l·∫°i API ƒë·ªÉ l·∫•y danh s√°ch m·ªõi
    fetch('http://localhost:3001/api/appointments/list')
      .then(res => res.json())
      .then(data => {
        const filtered = data.map(item => ({
          appointment_id: item.appointment_id,
          appointment_date: item.appointment_date,
          appointment_time: item.appointment_time,
          appointment_time_end: item.appointment_time_end,
          status: item.status,
          notes: item.notes
        }));
        setSchedules(filtered);
      })
      .catch(err => {
        console.error('L·ªói khi l·∫•y danh s√°ch l·ªãch:', err);
        setSchedules([]);
      });
  };

  // X·ª≠ l√Ω s·ª≠a
  const handleEdit = (idx) => {
    setEditIndex(idx);
    setShowForm(true);
  };

  // X·ª≠ l√Ω x√≥a
  const handleDelete = async (idx) => {
    const appointmentId = schedules[idx].appointment_id;
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ªãch n√†y?")) {
      try {
        const res = await fetch(`http://localhost:3001/api/appointments/${appointmentId}`, {
          method: "DELETE",
          headers: { "Content-Type": "application/json" }
        });
        if (!res.ok) throw new Error("X√≥a l·ªãch th·∫•t b·∫°i!");
        // Sau khi x√≥a th√†nh c√¥ng, c·∫≠p nh·∫≠t l·∫°i danh s√°ch
        setSchedules(schedules.filter((_, i) => i !== idx));
      } catch (err) {
        alert(err.message || "C√≥ l·ªói x·∫£y ra!");
      }
    }
  };

  // D·ªØ li·ªáu truy·ªÅn v√†o form khi s·ª≠a
  const editData = editIndex !== null ? schedules[editIndex] : undefined;

  return (
    <div className={styles.scheduleManagement}>
      <div className={styles.pageHeader}>
        <div className={styles.headerContent}>
          <div className={styles.headerLeft}>
            <div className={styles.headerIcon}>üìÖ</div>
            <div className={styles.headerInfo}>
              <h1 className={styles.pageTitle}>Qu·∫£n l√Ω l·ªãch tr√¨nh</h1>
              <p className={styles.pageSubtitle}>Qu·∫£n l√Ω v√† theo d√µi c√°c cu·ªôc h·∫πn hi·∫øn m√°u</p>
            </div>
          </div>
          <div className={styles.headerActions}>
            <button
              className={styles.createButton}
              onClick={() => { setShowForm(true); setEditIndex(null); }}
            >
              <span>‚ûï</span>
              Th√™m l·ªãch m·ªõi
            </button>
          </div>
        </div>
      </div>

      <div className={styles.scheduleContent}>
        <div className={styles.scheduleList}>
          <div className={styles.listHeader}>
            <h3 className={styles.listTitle}>Danh s√°ch l·ªãch h·∫πn</h3>
            <div className={styles.quickStats}>
              <div className={styles.statCard}>
                <div className={styles.statIcon}>üìä</div>
                <div className={styles.statInfo}>
                  <div className={styles.statValue}>{schedules.length}</div>
                  <div className={styles.statLabel}>T·ªïng l·ªãch h·∫πn</div>
                </div>
              </div>
            </div>
          </div>

          <div className={styles.tableContainer}>
            <table className={styles.scheduleTable}>
              <thead>
                <tr>
                  <th>Ng√†y h·∫πn</th>
                  <th>Gi·ªù h·∫πn</th>
                  <th>Gi·ªù k·∫øt th√∫c</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>Ghi ch√∫</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {schedules.length > 0 ? (
                  schedules.map((item, idx) => (
                    <tr key={idx} className={styles.scheduleRow}>
                      <td className={styles.scheduleDate}>
                        {new Date(item.appointment_date).toLocaleDateString('vi-VN')}
                      </td>
                      <td className={styles.scheduleTime}>
                        {item.appointment_time
                          ? new Date(item.appointment_time).toISOString().substring(11, 16)
                          : ""}
                      </td>
                      <td className={styles.scheduleTimeEnd}>
                        {item.appointment_time_end
                          ? new Date(item.appointment_time_end).toISOString().substring(11, 16)
                          : ""}
                      </td>
                      <td>
                        <span className={`${styles.scheduleStatus} ${styles[`status${item.status.charAt(0).toUpperCase() + item.status.slice(1)}`]}`}>
                          {item.status === 'scheduled' && 'üìÖ ƒê√£ l√™n l·ªãch'}
                          {item.status === 'completed' && '‚úÖ ƒê√£ ho√†n th√†nh'}
                          {item.status === 'cancelled' && '‚ùå ƒê√£ h·ªßy'}
                        </span>
                      </td>
                      <td className={styles.scheduleNotes}>{item.notes || 'Kh√¥ng c√≥ ghi ch√∫'}</td>
                      <td className={styles.scheduleActions}>
                        <button
                          className={`${styles.actionButton} ${styles.actionEdit}`}
                          title="S·ª≠a"
                          onClick={() => handleEdit(idx)}
                        >
                          ‚úèÔ∏è
                        </button>
                        <button
                          className={`${styles.actionButton} ${styles.actionDelete}`}
                          title="X√≥a"
                          onClick={() => handleDelete(idx)}
                        >
                          üóëÔ∏è
                        </button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="6" className={styles.emptyState}>
                      <div className={styles.emptyIcon}>üì≠</div>
                      <div className={styles.emptyTitle}>Ch∆∞a c√≥ l·ªãch h·∫πn n√†o</div>
                      <div className={styles.emptyDescription}>H√£y th√™m l·ªãch h·∫πn ƒë·∫ßu ti√™n c·ªßa b·∫°n</div>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {showForm && (
        <div className={styles.modal}>
          <div className={styles.modalBackdrop} onClick={() => { setShowForm(false); setEditIndex(null); }}></div>
          <div className={styles.modalContent}>
            <LenLich
              onSubmit={handleAddSchedule}
              onClose={() => { setShowForm(false); setEditIndex(null); }}
              defaultData={editData}
              isEdit={editIndex !== null}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default ScheduleManagement;