import React, { useEffect, useState } from 'react';
import axios from 'axios';
import styles from './DonationHistory.module.css';

function DonationHistory() {
  const [historyData, setHistoryData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [expandedDetails, setExpandedDetails] = useState({}); // State ƒë·ªÉ ƒëi·ªÅu khi·ªÉn hi·ªÉn th·ªã chi ti·∫øt
  const [deletingIds, setDeletingIds] = useState(new Set());

  // L·∫•y token t·ª´ localStorage
  const token = localStorage.getItem('token');

  // Function ƒë·ªÉ toggle hi·ªÉn th·ªã chi ti·∫øt
  const toggleDetails = (itemId) => {
    setExpandedDetails(prev => ({
      ...prev,
      [itemId]: !prev[itemId]
    }));
  };

  // X√≥a l·ªãch h·∫πn hi·∫øn m√°u
  const handleCancelAppointment = async (appointmentId) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy l·ªãch h·∫πn hi·∫øn m√°u n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.')) {
      return;
    }

    setDeletingIds(prev => new Set(prev).add(appointmentId));

    try {
      const response = await axios.delete(`http://localhost:3001/api/appointments/my/${appointmentId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('Cancel response:', response.data);

      // T·∫£i l·∫°i d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch
      window.location.reload();

      alert('H·ªßy l·ªãch h·∫πn hi·∫øn m√°u th√†nh c√¥ng!');
    } catch (err) {
      console.error('Error canceling appointment:', err);

      let errorMessage = 'Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn. Vui l√≤ng th·ª≠ l·∫°i sau.';
      if (err.response?.data?.message) {
        errorMessage = err.response.data.message;
      } else if (err.response?.status === 403) {
        errorMessage = 'B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy l·ªãch h·∫πn n√†y.';
      } else if (err.response?.status === 400) {
        errorMessage = 'Ch·ªâ c√≥ th·ªÉ h·ªßy nh·ªØng l·ªãch h·∫πn c√≥ tr·∫°ng th√°i "ƒê√£ l√™n l·ªãch".';
      }

      alert(errorMessage);
    } finally {
      setDeletingIds(prev => {
        const newSet = new Set(prev);
        newSet.delete(appointmentId);
        return newSet;
      });
    }
  };

  // Helper function ƒë·ªÉ l·∫•y th√¥ng tin tr·∫°ng th√°i (t∆∞∆°ng th√≠ch v·ªõi API c≈©)
  const getStatusInfo = (status) => {
    switch (status) {
      case 'scheduled':
        return {
          text: 'ƒê√£ ƒë·∫∑t l·ªãch',
          color: '#2196f3',
          bgColor: '#e3f2fd'
        };
      case 'completed':
      case 'donated':
        return {
          text: 'ƒê√£ hi·∫øn m√°u',
          color: '#4caf50',
          bgColor: '#e8f5e8'
        };
      case 'cancelled':
        return {
          text: 'ƒê√£ h·ªßy',
          color: '#f44336',
          bgColor: '#ffebee'
        };
      default:
        return {
          text: 'Kh√¥ng x√°c ƒë·ªãnh',
          color: '#9e9e9e',
          bgColor: '#f5f5f5'
        };
    }
  };

  // Helper function ƒë·ªÉ l·∫•y th√¥ng tin nh√≥m m√°u
  const getBloodTypeInfo = (bloodGroupId) => {
    const bloodTypes = {
      1: 'A+', 2: 'A-', 3: 'B+', 4: 'B-',
      5: 'AB+', 6: 'AB-', 7: 'O+', 8: 'O-', 9: 'Ch∆∞a bi·∫øt nh√≥m m√°u'
    };
    return bloodTypes[bloodGroupId] || 'Ch∆∞a x√°c ƒë·ªãnh';
  };

  useEffect(() => {
    const fetchDonationHistory = async () => {
      if (!token) {
        setError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem l·ªãch s·ª≠ hi·∫øn m√°u');
        setLoading(false);
        return;
      }

      setLoading(true);
      setError('');

      try {
        // L·∫•y l·ªãch s·ª≠ hi·∫øn m√°u
        const historyRes = await axios.get('/api/donors/my/history', {
          headers: { Authorization: `Bearer ${token}` }
        });

        let data = Array.isArray(historyRes.data) ? historyRes.data : historyRes.data?.data || [];

        // L·∫•y th√¥ng tin appointments ƒë·ªÉ t√¨m th·ªùi gian t∆∞∆°ng ·ª©ng
        if (data.length > 0) {
          try {
            // T√¨m ng√†y s·ªõm nh·∫•t v√† mu·ªôn nh·∫•t t·ª´ donation history
            const dates = data.map(item => new Date(item.donation_date));
            const earliestDate = new Date(Math.min(...dates));
            const latestDate = new Date(Math.max(...dates));

            // M·ªü r·ªông kho·∫£ng th·ªùi gian ƒë·ªÉ ƒë·∫£m b·∫£o bao ph·ªß t·∫•t c·∫£ appointments
            earliestDate.setDate(earliestDate.getDate() - 30); // L√πi 30 ng√†y
            latestDate.setDate(latestDate.getDate() + 30); // Ti·∫øn 30 ng√†y

            const fromStr = earliestDate.toISOString().slice(0, 10);
            const toStr = latestDate.toISOString().slice(0, 10);

            // L·∫•y appointments trong kho·∫£ng th·ªùi gian n√†y
            const allAppointmentsRes = await axios.get(`/api/appointments?from=${fromStr}&to=${toStr}`, {
              headers: { Authorization: `Bearer ${token}` }
            });

            const appointments = Array.isArray(allAppointmentsRes.data) ? allAppointmentsRes.data : allAppointmentsRes.data?.data || [];

            // Enriched data v·ªõi th√¥ng tin th·ªùi gian t·ª´ appointments
            const enrichedData = data.map(item => {
              // T√¨m appointment t∆∞∆°ng ·ª©ng d·ª±a tr√™n ng√†y v√† donor_id
              const matchingAppointment = appointments.find(apt => {
                const donationDate = new Date(item.donation_date).toDateString();
                const appointmentDate = new Date(apt.appointment_date).toDateString();
                return donationDate === appointmentDate && apt.donor_id === item.donor_id;
              });

              if (matchingAppointment) {
                return {
                  ...item,
                  appointment_time: matchingAppointment.appointment_time,
                  appointment_time_end: matchingAppointment.appointment_time_end
                };
              }

              return item;
            });

            data = enrichedData;
          } catch (appointmentErr) {
            console.log('Could not fetch appointments for time info:', appointmentErr);
          }
        }

        setHistoryData(data);
      } catch (err) {
        console.error('Error fetching donor data:', err);
        if (err.response?.status === 404) {
          setError('B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ hi·∫øn m√°u');
        } else if (err.response?.status === 401) {
          setError('Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
        } else {
          setError('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ hi·∫øn m√°u. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
        setHistoryData([]);
      } finally {
        setLoading(false);
      }
    };

    fetchDonationHistory();
  }, [token]);

  if (loading) return <div className={styles.loading}>ƒêang t·∫£i l·ªãch s·ª≠ hi·∫øn m√°u...</div>;
  if (error) return <div className={styles.error}>{error}</div>;

  return (
    <div className={styles.donationHistoryContainer}>
      <div className={styles.pageHeader}>
        <h2 className={styles.pageTitle}>L·ªãch s·ª≠ hi·∫øn m√°u</h2>
      </div>

      {!historyData || historyData.length === 0 ? (
        <div className={styles.noData}>B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ hi·∫øn m√°u.</div>
      ) : (
        <div className={styles.historyList}>
          {historyData.map((item, index) => {
            const statusInfo = getStatusInfo(item.donation_status || 'scheduled');
            // Ch·ªâ hi·ªÉn th·ªã ng√†y th·ª±c t·∫ø hi·∫øn m√°u khi ƒë√£ ho√†n th√†nh hi·∫øn m√°u
            const ngayHien = (item.donation_status === 'donated' || item.donation_status === 'completed')
              ? (item.collection_date || item.last_donation_date || '')
              : '';
            const ngayHen = item.appointment_date || '';
            const itemId = item.donation_record_id || `${item.donor_id}_${index}`;
            const isExpanded = expandedDetails[itemId] || false;
            const hasBloodComponents = (item.donation_status === 'donated' || item.donation_status === 'completed') &&
              item.blood_components && item.blood_components.length > 0;

            return (
              <div key={itemId} className={styles.historyCard}>
                <div className={styles.cardLogo}>
                  <div className={styles.bloodDrop}>ü©∏</div>
                </div>
                <div className={styles.cardContent}>
                  <div className={styles.cardRow}>
                    <span className={styles.cardLabel}>Ng√†y ƒëƒÉng k√Ω l·ªãch h·∫πn:</span>
                    <span className={styles.cardValue}>
                      {ngayHen ? new Date(ngayHen).toLocaleDateString('vi-VN') : '---'}
                    </span>
                  </div>
                  <div className={styles.cardRow}>
                    <span className={styles.cardLabel}>Ng√†y th·ª±c t·∫ø hi·∫øn m√°u:</span>
                    <span className={styles.cardValue}>
                      {ngayHien ? new Date(ngayHien).toLocaleDateString('vi-VN') :
                        (item.donation_status === 'scheduled' ? 'ƒêang ch·ªù hi·∫øn m√°u' : '---')}
                    </span>
                  </div>
                  {item.appointment_time && (
                    <div className={styles.cardRow}>
                      <span className={styles.cardLabel}>Th·ªùi gian:</span>
                      <span className={styles.cardValue}>
                        {item.appointment_time?.slice(0, 5)}
                        {item.appointment_time_end && ` - ${item.appointment_time_end.slice(0, 5)}`}
                      </span>
                    </div>
                  )}
                  <div className={styles.cardRow}>
                    <span className={styles.cardLabel}>Nh√≥m m√°u:</span>
                    <span className={`${styles.cardValue} ${styles.bloodTypeValue}`}>
                      {getBloodTypeInfo(item.blood_group_id)}
                    </span>
                  </div>
                  <div className={styles.cardRow}>
                    <span className={styles.cardLabel}>Tr·∫°ng th√°i:</span>
                    <span
                      className={styles.statusBadge}
                      style={{
                        color: statusInfo.color,
                        backgroundColor: statusInfo.bgColor
                      }}
                    >
                      {statusInfo.text}
                    </span>
                  </div>

                  {/* N√∫t h·ªßy cho tr·∫°ng th√°i scheduled */}
                  {item.donation_status === 'scheduled' && (
                    <div className={styles.actionButtonContainer}>
                      <button
                        className={styles.cancelButton}
                        onClick={() => handleCancelAppointment(item.appointment_id)}
                        disabled={deletingIds.has(item.appointment_id)}
                        data-deleting={deletingIds.has(item.appointment_id)}
                      >
                        {deletingIds.has(item.appointment_id) ? (
                          <>‚ö° ƒêang h·ªßy...</>
                        ) : (
                          <>‚ùå H·ªßy l·ªãch h·∫πn</>
                        )}
                      </button>
                      <div className={styles.cancelHelpText}>
                        Ch·ªâ c√≥ th·ªÉ h·ªßy nh·ªØng l·ªãch h·∫πn c√≥ tr·∫°ng th√°i "ƒê√£ ƒë·∫∑t l·ªãch"
                      </div>
                    </div>
                  )}

                  {/* N√∫t chi ti·∫øt n·∫øu c√≥ th√†nh ph·∫ßn m√°u */}
                  {hasBloodComponents && (
                    <div className={styles.detailsButtonContainer}>
                      <button
                        className={styles.detailsButton}
                        onClick={() => toggleDetails(itemId)}
                      >
                        {isExpanded ? 'üîΩ ·∫®n chi ti·∫øt' : 'üîº Xem chi ti·∫øt th√†nh ph·∫ßn m√°u'}
                      </button>
                    </div>
                  )}

                  {/* Hi·ªÉn th·ªã chi ti·∫øt th√†nh ph·∫ßn m√°u n·∫øu ƒë∆∞·ª£c m·ªü r·ªông */}
                  {hasBloodComponents && isExpanded && (
                    <div className={styles.bloodComponentsSection}>
                      <h4 className={styles.componentsTitle}>Chi ti·∫øt th√†nh ph·∫ßn m√°u:</h4>
                      {item.blood_components.map((component, componentIndex) => (
                        <div key={component.blood_bag_id || componentIndex} className={styles.componentCard}>
                          <div className={styles.componentHeader}>
                            <span className={styles.componentName}>{component.component_name}</span>
                            <span
                              className={styles.componentStatus}
                              style={{
                                color: component.bag_status === 'used' ? '#f44336' :
                                  component.bag_status === 'available' ? '#4caf50' : '#ff9800'
                              }}
                            >
                              {component.bag_status === 'used' ? 'ƒê√£ s·ª≠ d·ª•ng' :
                                component.bag_status === 'available' ? 'C√≤n hi·ªáu l·ª±c' :
                                  component.bag_status === 'expired' ? 'H·∫øt h·∫°n' : component.bag_status}
                            </span>
                          </div>

                          <div className={styles.componentDetails}>
                            <div className={styles.componentRow}>
                              <span>Th·ªÉ t√≠ch:</span>
                              <span>{component.volume_ml} ml</span>
                            </div>
                            <div className={styles.componentRow}>
                              <span>Ng√†y h·∫øt h·∫°n:</span>
                              <span>{component.expiry_date}</span>
                            </div>
                            <div className={styles.componentRow}>
                              <span>Th·ªùi gian c√≤n l·∫°i:</span>
                              <span className={component.days_remaining <= 7 ? styles.expiringSoon : ''}>
                                {component.days_remaining > 0 ? `${component.days_remaining} ng√†y` : 'ƒê√£ h·∫øt h·∫°n'}
                              </span>
                            </div>

                            {/* Th√¥ng tin ng∆∞·ªùi nh·∫≠n n·∫øu ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng */}
                            {component.recipient_name && (
                              <div className={styles.usageInfo}>
                                <div className={styles.usageTitle}>Th√¥ng tin s·ª≠ d·ª•ng:</div>
                                <div className={styles.componentRow}>
                                  <span>Ng∆∞·ªùi nh·∫≠n:</span>
                                  <span className={styles.recipientName}>{component.recipient_name}</span>
                                </div>
                                {component.recipient_medical_condition && (
                                  <div className={styles.componentRow}>
                                    <span>T√¨nh tr·∫°ng b·ªánh:</span>
                                    <span>{component.recipient_medical_condition}</span>
                                  </div>
                                )}
                                {component.issued_date && (
                                  <div className={styles.componentRow}>
                                    <span>Ng√†y s·ª≠ d·ª•ng:</span>
                                    <span>{component.issued_date}</span>
                                  </div>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
}

export default DonationHistory;
