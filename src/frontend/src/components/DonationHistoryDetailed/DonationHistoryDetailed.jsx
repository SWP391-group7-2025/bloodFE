import React, { useState, useEffect } from 'react';
import axios from 'axios';
import styles from './DonationHistoryDetailed.module.css';

// C·∫•u h√¨nh axios interceptor
axios.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

const DonationHistoryDetailed = () => {
  const [donations, setDonations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedDonation, setSelectedDonation] = useState(null);
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    fetchDonationHistory();
  }, []);

  const fetchDonationHistory = async () => {
    try {
      setLoading(true);
      const response = await axios.get('/api/donors/my/detailed-history');
      setDonations(response.data);
    } catch (err) {
      console.error('Error fetching donation history:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ hi·∫øn m√°u. Vui l√≤ng th·ª≠ l·∫°i sau.');
    } finally {
      setLoading(false);
    }
  };

  const handleViewDetail = (donation) => {
    setSelectedDonation(donation);
    setShowModal(true);
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'Ch∆∞a r√µ';
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });
  };

  const formatDateTime = (dateString) => {
    if (!dateString) return 'Ch∆∞a r√µ';
    return new Date(dateString).toLocaleString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusBadge = (donation) => {
    return (
      <span 
        className={styles.statusBadge}
        style={{ 
          backgroundColor: donation.status_color,
          color: 'white'
        }}
      >
        {donation.status_icon} {donation.usage_status}
      </span>
    );
  };

  const getExpiryInfo = (donation) => {
    if (donation.is_expired) {
      return (
        <span className={styles.expiredInfo}>
          ‚ö†Ô∏è ƒê√£ h·∫øt h·∫°n {Math.abs(donation.days_until_expiry)} ng√†y
        </span>
      );
    } else if (donation.days_until_expiry <= 7) {
      return (
        <span className={styles.expiringSoon}>
          ‚è∞ C√≤n {donation.days_until_expiry} ng√†y h·∫øt h·∫°n
        </span>
      );
    }
    return null;
  };

  if (loading) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.spinner}></div>
        <p>ƒêang t·∫£i l·ªãch s·ª≠ hi·∫øn m√°u...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.errorContainer}>
        <div className={styles.errorIcon}>‚ùå</div>
        <p className={styles.errorMessage}>{error}</p>
        <button className={styles.retryButton} onClick={fetchDonationHistory}>
          üîÑ Th·ª≠ l·∫°i
        </button>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h2 className={styles.title}>
          <span className={styles.titleIcon}>ü©∏</span>
          L·ªãch s·ª≠ hi·∫øn m√°u chi ti·∫øt
        </h2>
        <p className={styles.subtitle}>
          Theo d√µi h√†nh tr√¨nh m√°u b·∫°n hi·∫øn v√† t√°c ƒë·ªông c·ªßa n√≥
        </p>
      </div>

      {donations.length === 0 ? (
        <div className={styles.emptyState}>
          <div className={styles.emptyIcon}>ü©∏</div>
          <h3>Ch∆∞a c√≥ l·ªãch s·ª≠ hi·∫øn m√°u</h3>
          <p>H√£y ƒëƒÉng k√Ω hi·∫øn m√°u ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh c·ª©u ng∆∞·ªùi!</p>
        </div>
      ) : (
        <div className={styles.donationGrid}>
          {donations.map(donation => (
            <div key={donation.donation_id} className={styles.donationCard}>
              <div className={styles.cardHeader}>
                <div className={styles.donationDate}>
                  <span className={styles.dateIcon}>üìÖ</span>
                  <span>{formatDate(donation.donation_date)}</span>
                </div>
                {getStatusBadge(donation)}
              </div>
              
              <div className={styles.cardBody}>
                <div className={styles.bloodInfo}>
                  <div className={styles.bloodType}>
                    <span className={styles.typeLabel}>Nh√≥m m√°u</span>
                    <span className={styles.typeValue}>{donation.blood_type}</span>
                  </div>
                  <div className={styles.component}>
                    <span className={styles.componentLabel}>Th√†nh ph·∫ßn</span>
                    <span className={styles.componentValue}>{donation.component_name}</span>
                  </div>
                  <div className={styles.volume}>
                    <span className={styles.volumeLabel}>Th·ªÉ t√≠ch</span>
                    <span className={styles.volumeValue}>{donation.volume_ml}ml</span>
                  </div>
                </div>
                
                <div className={styles.usageInfo}>
                  <p className={styles.usageDetail}>{donation.usage_detail}</p>
                  
                  {donation.recipient_name && (
                    <div className={styles.recipientInfo}>
                      <span className={styles.recipientIcon}>üë§</span>
                      <span>B·ªánh nh√¢n: {donation.recipient_name}</span>
                      {donation.medical_info && donation.medical_info !== 'Kh√¥ng c√≥ th√¥ng tin b·ªánh l√Ω' && (
                        <span className={styles.medicalInfo}>({donation.medical_info})</span>
                      )}
                    </div>
                  )}
                  
                  {donation.partner_organization_name && (
                    <div className={styles.partnerInfo}>
                      <span className={styles.partnerIcon}>üè•</span>
                      <span>B·ªánh vi·ªán: {donation.partner_organization_name}</span>
                      {donation.partner_patient_name && (
                        <span> - BN: {donation.partner_patient_name}</span>
                      )}
                    </div>
                  )}
                  
                  {donation.issued_date && (
                    <div className={styles.issuedDate}>
                      <span className={styles.issuedIcon}>üìã</span>
                      <span>S·ª≠ d·ª•ng: {formatDateTime(donation.issued_date)}</span>
                    </div>
                  )}
                  
                  {getExpiryInfo(donation)}
                </div>
              </div>
              
              <div className={styles.cardFooter}>
                <button 
                  className={styles.detailButton}
                  onClick={() => handleViewDetail(donation)}
                >
                  üëÅÔ∏è Xem chi ti·∫øt
                </button>
                <span className={styles.bagId}>M√£ t√∫i: #{donation.blood_bag_id}</span>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Modal chi ti·∫øt */}
      {showModal && selectedDonation && (
        <div className={styles.modalOverlay} onClick={() => setShowModal(false)}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <div className={styles.modalHeader}>
              <h3>Chi ti·∫øt l·∫ßn hi·∫øn m√°u</h3>
              <button 
                className={styles.closeButton}
                onClick={() => setShowModal(false)}
              >
                ‚úï
              </button>
            </div>
            
            <div className={styles.modalBody}>
              <div className={styles.detailRow}>
                <span className={styles.detailLabel}>Ng√†y hi·∫øn:</span>
                <span className={styles.detailValue}>{formatDate(selectedDonation.donation_date)}</span>
              </div>
              
              <div className={styles.detailRow}>
                <span className={styles.detailLabel}>M√£ t√∫i m√°u:</span>
                <span className={styles.detailValue}>#{selectedDonation.blood_bag_id}</span>
              </div>
              
              <div className={styles.detailRow}>
                <span className={styles.detailLabel}>Nh√≥m m√°u:</span>
                <span className={styles.detailValue}>{selectedDonation.blood_type}</span>
              </div>
              
              <div className={styles.detailRow}>
                <span className={styles.detailLabel}>Th√†nh ph·∫ßn:</span>
                <span className={styles.detailValue}>{selectedDonation.component_name}</span>
              </div>
              
              <div className={styles.detailRow}>
                <span className={styles.detailLabel}>Th·ªÉ t√≠ch:</span>
                <span className={styles.detailValue}>{selectedDonation.volume_ml}ml</span>
              </div>
              
              <div className={styles.detailRow}>
                <span className={styles.detailLabel}>Ng√†y l·∫•y m√°u:</span>
                <span className={styles.detailValue}>{formatDate(selectedDonation.collection_date)}</span>
              </div>
              
              <div className={styles.detailRow}>
                <span className={styles.detailLabel}>H·∫°n s·ª≠ d·ª•ng:</span>
                <span className={styles.detailValue}>{formatDate(selectedDonation.expiry_date)}</span>
              </div>
              
              <div className={styles.detailRow}>
                <span className={styles.detailLabel}>Tr·∫°ng th√°i:</span>
                <span className={styles.detailValue}>{selectedDonation.usage_status}</span>
              </div>
              
              <div className={styles.detailRow}>
                <span className={styles.detailLabel}>Chi ti·∫øt s·ª≠ d·ª•ng:</span>
                <span className={styles.detailValue}>{selectedDonation.usage_detail}</span>
              </div>
              
              {selectedDonation.recipient_name && (
                <div className={styles.detailRow}>
                  <span className={styles.detailLabel}>B·ªánh nh√¢n nh·∫≠n:</span>
                  <span className={styles.detailValue}>{selectedDonation.recipient_name}</span>
                </div>
              )}
              
              {selectedDonation.medical_info && selectedDonation.medical_info !== 'Kh√¥ng c√≥ th√¥ng tin b·ªánh l√Ω' && (
                <div className={styles.detailRow}>
                  <span className={styles.detailLabel}>T√¨nh tr·∫°ng b·ªánh:</span>
                  <span className={styles.detailValue}>{selectedDonation.medical_info}</span>
                </div>
              )}
              
              {selectedDonation.issued_date && (
                <div className={styles.detailRow}>
                  <span className={styles.detailLabel}>Th·ªùi gian s·ª≠ d·ª•ng:</span>
                  <span className={styles.detailValue}>{formatDateTime(selectedDonation.issued_date)}</span>
                </div>
              )}
            </div>
            
            <div className={styles.modalFooter}>
              <button 
                className={styles.closeModalButton}
                onClick={() => setShowModal(false)}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DonationHistoryDetailed;
