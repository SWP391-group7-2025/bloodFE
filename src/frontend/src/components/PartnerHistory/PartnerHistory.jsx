import React, { useState, useEffect } from 'react';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { FaHistory, FaEdit, FaTrash, FaSearch, FaEye, FaCalendar, FaFilter, FaClock } from 'react-icons/fa';
import styles from './PartnerHistory.module.css';

const PartnerHistory = () => {
  const [requests, setRequests] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchFilter, setSearchFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [dateFilter, setDateFilter] = useState('');
  const [viewMode, setViewMode] = useState('grid'); // grid or list
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);

  const token = localStorage.getItem('token');

  // Format blood type display - Backend ƒë√£ tr·∫£ v·ªÅ ti·∫øng Vi·ªát r·ªìi, ch·ªâ c·∫ßn fallback
  const formatBloodType = (bloodType, rhFactor) => {
    // N·∫øu backend ƒë√£ tr·∫£ v·ªÅ "Ch∆∞a bi·∫øt nh√≥m m√°u" th√¨ d√πng lu√¥n
    if (bloodType === 'Ch∆∞a bi·∫øt nh√≥m m√°u') {
      return bloodType;
    }
    // Fallback cho tr∆∞·ªùng h·ª£p backend ch∆∞a c·∫≠p nh·∫≠t
    if (bloodType === 'U' && rhFactor === '?') {
      return 'Ch∆∞a bi·∫øt nh√≥m m√°u';
    }

    // Fix l·ªói hi·ªÉn th·ªã ++ thay v√¨ +
    let cleanBloodType = bloodType;
    let cleanRhFactor = rhFactor;

    // N·∫øu bloodType ƒë√£ ch·ª©a Rh factor, t√°ch ra
    if (bloodType && (bloodType.includes('+') || bloodType.includes('-'))) {
      const match = bloodType.match(/^(A|B|AB|O)([+-]).*$/);
      if (match) {
        cleanBloodType = match[1];
        cleanRhFactor = match[2]; // Ch·ªâ l·∫•y k√Ω t·ª± ƒë·∫ßu ti√™n (+ ho·∫∑c -)
      } else {
        // Fallback: return bloodType as is if regex doesn't match
        return bloodType;
      }
    } else {
      // ƒê·∫£m b·∫£o rhFactor ch·ªâ c√≥ 1 k√Ω t·ª±
      if (cleanRhFactor && cleanRhFactor.length > 1) {
        cleanRhFactor = cleanRhFactor.charAt(0);
      }
    }

    return `${cleanBloodType}${cleanRhFactor}`;
  };

  useEffect(() => {
    fetchMyRequests();
  }, []);

  const fetchMyRequests = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('http://localhost:3001/api/partner/my-requests', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();

        // Fix encoding cho t·∫•t c·∫£ c√°c request
        const fixedData = data.map(request => ({
          ...request,
          full_name: fixVietnameseEncoding(request.full_name),
          address: fixVietnameseEncoding(request.address)
        }));

        setRequests(fixedData);
      } else {
        const errorData = await response.json();
        console.error('Error response:', errorData);
        toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch y√™u c·∫ßu: ' + (errorData.error || 'Unknown error'));
      }
    } catch (error) {
      console.error('Error fetching requests:', error);
      toast.error('L·ªói k·∫øt n·ªëi: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleEdit = (request) => {
    if (request.status !== 'pending') {
      toast.warning('Ch·ªâ c√≥ th·ªÉ ch·ªânh s·ª≠a y√™u c·∫ßu ƒëang ch·ªù x·ª≠ l√Ω');
      return;
    }
    // Redirect to emergency request page with edit mode
    window.location.href = `/partner/emergency-request?edit=${request.partner_req_id}`;
  };

  const handleDelete = async (id) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a y√™u c·∫ßu n√†y kh√¥ng?')) return;

    try {
      const response = await fetch(`http://localhost:3001/api/partner/request/${id}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (response.ok) {
        toast.success('X√≥a y√™u c·∫ßu th√†nh c√¥ng!');
        fetchMyRequests();
      } else {
        const data = await response.json();
        toast.error(data.error || 'Kh√¥ng th·ªÉ x√≥a y√™u c·∫ßu');
      }
    } catch (error) {
      toast.error('L·ªói k·∫øt n·ªëi');
    }
  };

  const handleViewDetails = async (request) => {
    try {
      const response = await fetch(`http://localhost:3001/api/partner/request/${request.partner_req_id}/detailed`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (response.ok) {
        const detailedData = await response.json();
        console.log('üß™ DEBUG - Detailed data received:', detailedData);
        console.log('üß™ DEBUG - Donor info:', detailedData.donor_info);
        setSelectedRequest(detailedData);
        setShowDetailModal(true);
      } else {
        toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin chi ti·∫øt');
      }
    } catch (error) {
      console.error('Error loading details:', error);
      toast.error('L·ªói k·∫øt n·ªëi khi t·∫£i chi ti·∫øt');
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return '#ffc107';
      case 'approved': return '#28a745';
      case 'rejected': return '#dc3545';
      case 'fulfilled': return '#17a2b8';
      case 'done': return '#17a2b8';
      default: return '#6c757d';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'pending': return 'ƒêang ch·ªù';
      case 'approved': return 'ƒê√£ duy·ªát';
      case 'rejected': return 'T·ª´ ch·ªëi';
      case 'fulfilled': return 'Ho√†n th√†nh';
      case 'done': return 'Ho√†n th√†nh';
      case 'cancel': return 'ƒê√£ h·ªßy';
      default: return status;
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'pending': return '‚è≥';
      case 'approved': return '‚úÖ';
      case 'rejected': return '‚ùå';
      case 'fulfilled': return 'üéâ';
      case 'done': return 'üéâ';
      case 'cancel': return 'üö´';
      default: return '‚ùì';
    }
  };

  const filteredRequests = requests.filter(request => {
    const matchesSearch = !searchFilter ||
      request.full_name.toLowerCase().includes(searchFilter.toLowerCase()) ||
      request.email.toLowerCase().includes(searchFilter.toLowerCase()) ||
      request.phone.includes(searchFilter);

    const matchesStatus = !statusFilter || request.status === statusFilter;

    const matchesDate = !dateFilter ||
      new Date(request.request_date).toISOString().split('T')[0] === dateFilter;

    return matchesSearch && matchesStatus && matchesDate;
  });

  const getRequestStats = () => {
    const total = requests.length;
    const pending = requests.filter(r => r.status === 'pending').length;
    const approved = requests.filter(r => r.status === 'approved').length;
    const fulfilled = requests.filter(r => r.status === 'fulfilled' || r.status === 'done').length;
    const rejected = requests.filter(r => r.status === 'rejected').length;

    return { total, pending, approved, fulfilled, rejected };
  };

  const stats = getRequestStats();

  // Function ƒë·ªÉ fix l·ªói encoding UTF-8 cho ti·∫øng Vi·ªát
  const fixVietnameseEncoding = (text) => {
    if (!text) return '';

    // N·∫øu text ƒë√£ hi·ªÉn th·ªã ƒë√∫ng (c√≥ k√Ω t·ª± ti·∫øng Vi·ªát), return lu√¥n
    if (/[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒëƒê]/.test(text)) {
      return text;
    }

    // N·∫øu c√≥ d·∫•u ? trong text, c√≥ th·ªÉ b·ªã l·ªói encoding
    if (text.includes('?')) {
      return text
        .replace(/Nguy.n/gi, 'Nguy·ªÖn')
        .replace(/H.ng/gi, 'H·ªìng')
        .replace(/Tr.n/gi, 'Tr·∫ßn')
        .replace(/Th.nh/gi, 'Th√†nh')
        .replace(/L./gi, 'L√™')
        .replace(/Ph.m/gi, 'Ph·∫°m')
        .replace(/Ho.ng/gi, 'Ho√†ng')
        .replace(/Hu.nh/gi, 'Hu·ª≥nh')
        .replace(/V./gi, 'V≈©')
        .replace(/\?.ng/gi, '∆∞·ªùng')
        .replace(/\?.i/gi, '·ªùi')
        .replace(/\?.u/gi, '·ªÅu')
        .replace(/\?/g, ''); // X√≥a d·∫•u ? c√≤n l·∫°i
    }

    return text;
  };

  const handleViewDetail = (request) => {
    setSelectedRequest(request);
    setShowDetailModal(true);
  };

  const handleCloseDetailModal = () => {
    setShowDetailModal(false);
    setSelectedRequest(null);
  };

  if (isLoading) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.spinner}></div>
        <p>ƒêang t·∫£i l·ªãch s·ª≠ y√™u c·∫ßu...</p>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      {/* Header */}
      <div className={styles.header}>
        <div className={styles.headerContent}>
          <div className={styles.titleSection}>
            <FaHistory className={styles.headerIcon} />
            <div>
              <h1>L·ªãch S·ª≠ Y√™u C·∫ßu</h1>
              <p>Theo d√µi t·∫•t c·∫£ c√°c y√™u c·∫ßu nh·∫≠n m√°u kh·∫©n c·∫•p c·ªßa b·∫°n</p>
            </div>
          </div>
          <button
            className={styles.newRequestBtn}
            onClick={() => window.location.href = '/partner/emergency-request'}
          >
            <FaCalendar /> T·∫°o y√™u c·∫ßu m·ªõi
          </button>
        </div>
      </div>

      {/* Statistics */}
      <div className={styles.statsSection}>
        <div className={styles.statCard}>
          <div className={styles.statIcon} style={{ backgroundColor: '#3498db' }}>
            <FaHistory />
          </div>
          <div className={styles.statInfo}>
            <span className={styles.statNumber}>{stats.total}</span>
            <span className={styles.statLabel}>T·ªïng y√™u c·∫ßu</span>
          </div>
        </div>

        <div className={styles.statCard}>
          <div className={styles.statIcon} style={{ backgroundColor: '#f39c12' }}>
            <FaClock />
          </div>
          <div className={styles.statInfo}>
            <span className={styles.statNumber}>{stats.pending}</span>
            <span className={styles.statLabel}>ƒêang ch·ªù</span>
          </div>
        </div>

        <div className={styles.statCard}>
          <div className={styles.statIcon} style={{ backgroundColor: '#27ae60' }}>
            ‚úÖ
          </div>
          <div className={styles.statInfo}>
            <span className={styles.statNumber}>{stats.approved}</span>
            <span className={styles.statLabel}>ƒê√£ duy·ªát</span>
          </div>
        </div>

        <div className={styles.statCard}>
          <div className={styles.statIcon} style={{ backgroundColor: '#17a2b8' }}>
            üéâ
          </div>
          <div className={styles.statInfo}>
            <span className={styles.statNumber}>{stats.fulfilled}</span>
            <span className={styles.statLabel}>Ho√†n th√†nh</span>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className={styles.filtersSection}>
        <div className={styles.searchBox}>
          <FaSearch className={styles.searchIcon} />
          <input
            type="text"
            placeholder="T√¨m ki·∫øm theo t√™n, email, SƒêT..."
            value={searchFilter}
            onChange={(e) => setSearchFilter(e.target.value)}
          />
        </div>

        <div className={styles.filterGroup}>
          <FaFilter className={styles.filterIcon} />
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className={styles.statusFilter}
          >
            <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            <option value="pending">ƒêang ch·ªù</option>
            <option value="approved">ƒê√£ duy·ªát</option>
            <option value="rejected">T·ª´ ch·ªëi</option>
            <option value="fulfilled">Ho√†n th√†nh</option>
            <option value="done">Ho√†n th√†nh</option>
            <option value="cancel">ƒê√£ h·ªßy</option>
          </select>

          <input
            type="date"
            value={dateFilter}
            onChange={(e) => setDateFilter(e.target.value)}
            className={styles.dateFilter}
          />
        </div>

        <div className={styles.viewToggle}>
          <button
            className={`${styles.viewBtn} ${viewMode === 'grid' ? styles.active : ''}`}
            onClick={() => setViewMode('grid')}
          >
            ‚äû Grid
          </button>
          <button
            className={`${styles.viewBtn} ${viewMode === 'list' ? styles.active : ''}`}
            onClick={() => setViewMode('list')}
          >
            ‚ò∞ List
          </button>
        </div>
      </div>

      {/* Requests List */}
      <div className={styles.requestsSection}>
        {filteredRequests.length === 0 ? (
          <div className={styles.emptyState}>
            <FaHistory className={styles.emptyIcon} />
            <h3>Ch∆∞a c√≥ y√™u c·∫ßu n√†o</h3>
            <p>B·∫°n ch∆∞a t·∫°o y√™u c·∫ßu nh·∫≠n m√°u kh·∫©n c·∫•p n√†o. H√£y t·∫°o y√™u c·∫ßu ƒë·∫ßu ti√™n!</p>
            <button
              className={styles.createFirstBtn}
              onClick={() => window.location.href = '/partner/emergency-request'}
            >
              T·∫°o y√™u c·∫ßu ƒë·∫ßu ti√™n
            </button>
          </div>
        ) : (
          <div className={`${styles.requestsList} ${styles[viewMode]}`}>
            {filteredRequests.map(request => (
              <div key={request.partner_req_id} className={styles.requestCard}>
                <div className={styles.requestHeader}>
                  <div className={styles.requestTitle}>
                    <h3>{request.full_name}</h3>
                    <span className={styles.requestId}>#{request.partner_req_id}</span>
                  </div>
                  <div className={styles.requestStatus}>
                    <span
                      className={styles.statusBadge}
                      style={{ backgroundColor: getStatusColor(request.status) }}
                    >
                      {getStatusIcon(request.status)} {getStatusText(request.status)}
                    </span>
                  </div>
                </div>

                <div className={styles.requestInfo}>
                  <div className={styles.infoGrid}>
                    <div className={styles.infoItem}>
                      <span className={styles.infoLabel}>Email:</span>
                      <span className={styles.infoValue}>{request.email}</span>
                    </div>
                    <div className={styles.infoItem}>
                      <span className={styles.infoLabel}>SƒêT:</span>
                      <span className={styles.infoValue}>{request.phone}</span>
                    </div>
                    <div className={styles.infoItem}>
                      <span className={styles.infoLabel}>Nh√≥m m√°u:</span>
                      <span className={styles.infoValue}>
                        {formatBloodType(request.blood_type, request.rh_factor)}
                      </span>
                    </div>
                    <div className={styles.infoItem}>
                      <span className={styles.infoLabel}>Th√†nh ph·∫ßn:</span>
                      <span className={styles.infoValue}>{request.component_name}</span>
                    </div>
                    <div className={styles.infoItem}>
                      <span className={styles.infoLabel}>Ng√†y y√™u c·∫ßu:</span>
                      <span className={styles.infoValue}>
                        {new Date(request.request_date).toLocaleDateString('vi-VN')}
                      </span>
                    </div>
                    <div className={styles.infoItem}>
                      <span className={styles.infoLabel}>ƒê·ªãa ch·ªâ:</span>
                      <span className={styles.infoValue}>{request.address}</span>
                    </div>
                  </div>
                </div>

                <div className={styles.requestActions}>
                  {request.status === 'pending' && (
                    <>
                      <button
                        onClick={() => handleEdit(request)}
                        className={styles.editBtn}
                        title="Ch·ªânh s·ª≠a y√™u c·∫ßu"
                      >
                        <FaEdit /> S·ª≠a
                      </button>
                      <button
                        onClick={() => handleDelete(request.partner_req_id)}
                        className={styles.deleteBtn}
                        title="X√≥a y√™u c·∫ßu"
                      >
                        <FaTrash /> X√≥a
                      </button>
                    </>
                  )}
                  <button
                    className={styles.viewBtn}
                    title="Xem chi ti·∫øt"
                    onClick={() => handleViewDetails(request)}
                  >
                    <FaEye /> Xem
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Detail Modal */}
      {showDetailModal && selectedRequest && (
        <div className={styles.modalOverlay} onClick={() => setShowDetailModal(false)}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <div className={styles.modalHeader}>
              <h2>Chi ti·∫øt y√™u c·∫ßu #{selectedRequest.partner_req_id}</h2>
              <button
                className={styles.closeBtn}
                onClick={() => setShowDetailModal(false)}
              >
                ‚úï
              </button>
            </div>

            <div className={styles.modalBody}>
              {/* Patient Information */}
              <div className={styles.detailSection}>
                <h3>üë§ Th√¥ng tin b·ªánh nh√¢n</h3>
                <div className={styles.detailGrid}>
                  <div className={styles.detailItem}>
                    <span className={styles.detailLabel}>H·ªç t√™n:</span>
                    <span className={styles.detailValue}>{selectedRequest.full_name}</span>
                  </div>
                  <div className={styles.detailItem}>
                    <span className={styles.detailLabel}>Email:</span>
                    <span className={styles.detailValue}>{selectedRequest.email}</span>
                  </div>
                  <div className={styles.detailItem}>
                    <span className={styles.detailLabel}>S·ªë ƒëi·ªán tho·∫°i:</span>
                    <span className={styles.detailValue}>{selectedRequest.phone}</span>
                  </div>
                  <div className={styles.detailItem}>
                    <span className={styles.detailLabel}>Gi·ªõi t√≠nh:</span>
                    <span className={styles.detailValue}>
                      {selectedRequest.gender === 'male' ? 'Nam' :
                        selectedRequest.gender === 'female' ? 'N·ªØ' : 'Kh√°c'}
                    </span>
                  </div>
                  <div className={styles.detailItem}>
                    <span className={styles.detailLabel}>Ng√†y sinh:</span>
                    <span className={styles.detailValue}>
                      {new Date(selectedRequest.date_of_birth).toLocaleDateString('vi-VN')}
                    </span>
                  </div>
                  <div className={styles.detailItem}>
                    <span className={styles.detailLabel}>ƒê·ªãa ch·ªâ:</span>
                    <span className={styles.detailValue}>{selectedRequest.address}</span>
                  </div>
                </div>
              </div>

              {/* Blood Request Information */}
              <div className={styles.detailSection}>
                <h3>ü©∏ Th√¥ng tin y√™u c·∫ßu m√°u</h3>
                <div className={styles.detailGrid}>
                  <div className={styles.detailItem}>
                    <span className={styles.detailLabel}>Nh√≥m m√°u c·∫ßn:</span>
                    <span className={styles.detailValue}>
                      {formatBloodType(selectedRequest.blood_type, selectedRequest.rh_factor)}
                    </span>
                  </div>
                  <div className={styles.detailItem}>
                    <span className={styles.detailLabel}>Th√†nh ph·∫ßn m√°u:</span>
                    <span className={styles.detailValue}>{selectedRequest.component_name}</span>
                  </div>
                  <div className={styles.detailItem}>
                    <span className={styles.detailLabel}>Ng√†y c·∫ßn m√°u:</span>
                    <span className={styles.detailValue}>
                      {new Date(selectedRequest.request_date).toLocaleDateString('vi-VN')}
                    </span>
                  </div>
                  <div className={styles.detailItem}>
                    <span className={styles.detailLabel}>Tr·∫°ng th√°i:</span>
                    <span className={`${styles.detailValue} ${styles.statusValue}`}>
                      <span
                        className={styles.statusBadge}
                        style={{ backgroundColor: getStatusColor(selectedRequest.status) }}
                      >
                        {getStatusIcon(selectedRequest.status)} {getStatusText(selectedRequest.status)}
                      </span>
                    </span>
                  </div>
                  {selectedRequest.requested_quantity && (
                    <div className={styles.detailItem}>
                      <span className={styles.detailLabel}>S·ªë l∆∞·ª£ng y√™u c·∫ßu:</span>
                      <span className={styles.detailValue}>{selectedRequest.requested_quantity} ƒë∆°n v·ªã</span>
                    </div>
                  )}
                </div>
              </div>

              {/* Donor Information */}
              {selectedRequest.donor_info && selectedRequest.donor_info.length > 0 && (
                <div className={styles.detailSection}>
                  <h3>üíù Th√¥ng tin ng∆∞·ªùi hi·∫øn m√°u</h3>
                  {selectedRequest.donor_info.map((donor, index) => (
                    <div key={index} className={styles.donorCard}>
                      <div className={styles.donorHeader}>
                        <h4>ü©∏ T√∫i m√°u #{donor.blood_bag_id}</h4>
                        <span className={styles.donorDate}>
                          Ng√†y c·∫•p ph√°t: {new Date(donor.issued_date).toLocaleDateString('vi-VN')}
                        </span>
                      </div>
                      <div className={styles.donorInfo}>
                        <div className={styles.donorGrid}>
                          <div className={styles.donorItem}>
                            <span className={styles.donorLabel}>Ng∆∞·ªùi hi·∫øn:</span>
                            <span className={styles.donorValue}>{donor.donor_name}</span>
                          </div>
                          <div className={styles.donorItem}>
                            <span className={styles.donorLabel}>Email:</span>
                            <span className={styles.donorValue}>{donor.donor_email}</span>
                          </div>
                          <div className={styles.donorItem}>
                            <span className={styles.donorLabel}>SƒêT:</span>
                            <span className={styles.donorValue}>{donor.donor_phone}</span>
                          </div>
                          <div className={styles.donorItem}>
                            <span className={styles.donorLabel}>Nh√≥m m√°u:</span>
                            <span className={styles.donorValue}>
                              {formatBloodType(donor.donor_blood_type, donor.donor_rh_factor)}
                            </span>
                          </div>
                          <div className={styles.donorItem}>
                            <span className={styles.donorLabel}>Ng√†y hi·∫øn m√°u:</span>
                            <span className={styles.donorValue}>
                              {new Date(donor.collection_date).toLocaleDateString('vi-VN')}
                            </span>
                          </div>
                          <div className={styles.donorItem}>
                            <span className={styles.donorLabel}>Th·ªÉ t√≠ch:</span>
                            <span className={styles.donorValue}>{donor.volume_ml}ml</span>
                          </div>
                          <div className={styles.donorItem}>
                            <span className={styles.donorLabel}>H·∫°n s·ª≠ d·ª•ng:</span>
                            <span className={styles.donorValue}>
                              {new Date(donor.expiry_date).toLocaleDateString('vi-VN')}
                            </span>
                          </div>
                          <div className={styles.donorItem}>
                            <span className={styles.donorLabel}>C·∫•p ph√°t b·ªüi:</span>
                            <span className={styles.donorValue}>{donor.issued_by_name}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {/* No donor info message */}
              {(!selectedRequest.donor_info || selectedRequest.donor_info.length === 0) &&
                selectedRequest.status !== 'pending' && (
                  <div className={styles.detailSection}>
                    <div className={styles.noDonorInfo}>
                      <h3>üíù Th√¥ng tin ng∆∞·ªùi hi·∫øn m√°u</h3>
                      <p>Ch∆∞a c√≥ th√¥ng tin ng∆∞·ªùi hi·∫øn m√°u cho y√™u c·∫ßu n√†y.</p>
                      {selectedRequest.status === 'rejected' && (
                        <p className={styles.rejectedNote}>Y√™u c·∫ßu ƒë√£ b·ªã t·ª´ ch·ªëi.</p>
                      )}
                    </div>
                  </div>
                )}
            </div>
          </div>
        </div>
      )}

      <ToastContainer position="top-right" autoClose={3000} />
    </div>
  );
};

export default PartnerHistory;
