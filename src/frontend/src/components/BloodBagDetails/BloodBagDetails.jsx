import React, { useState, useEffect } from 'react';
import axios from 'axios';
import styles from './BloodBagDetails.module.css';

const BloodBagDetails = ({ bloodBagId, onClose, onConfirm, showConfirmButton = false }) => {
    const [bagDetails, setBagDetails] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const token = localStorage.getItem('token');

    useEffect(() => {
        if (bloodBagId) {
            fetchBloodBagDetails();
        }
    }, [bloodBagId]);

    const fetchBloodBagDetails = async () => {
        try {
            setLoading(true);
            const response = await axios.get(
                `http://localhost:3001/api/recipients/blood-bags/${bloodBagId}/details`,
                {
                    headers: { Authorization: `Bearer ${token}` }
                }
            );
            setBagDetails(response.data);
        } catch (error) {
            console.error('Error fetching blood bag details:', error);
            setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t√∫i m√°u');
        } finally {
            setLoading(false);
        }
    };

    const formatDate = (dateString) => {
        if (!dateString) return 'N/A';
        return new Date(dateString).toLocaleDateString('vi-VN');
    };

    const getUrgencyColor = (urgencyStatus) => {
        switch (urgencyStatus) {
            case 'S·∫Øp h·∫øt h·∫°n':
                return '#f44336'; // ƒê·ªè
            case 'C·∫ßn s·ª≠ d·ª•ng s·ªõm':
                return '#ff9800'; // Cam
            case 'T√¨nh tr·∫°ng t·ªët':
                return '#4caf50'; // Xanh l√°
            default:
                return '#9e9e9e'; // X√°m
        }
    };

    if (loading) {
        return (
            <div className={styles.modal}>
                <div className={styles.modalContent}>
                    <div className={styles.loading}>
                        <div className={styles.spinner}></div>
                        <p>ƒêang t·∫£i th√¥ng tin t√∫i m√°u...</p>
                    </div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className={styles.modal}>
                <div className={styles.modalContent}>
                    <div className={styles.error}>
                        <p>{error}</p>
                        <button onClick={onClose} className={styles.closeButton}>
                            ƒê√≥ng
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    if (!bagDetails) {
        return null;
    }

    return (
        <div className={styles.modal}>
            <div className={styles.modalContent}>
                <div className={styles.header}>
                    <h2>Chi ti·∫øt t√∫i m√°u #{bagDetails.blood_bag_id}</h2>
                    <button onClick={onClose} className={styles.closeIcon}>
                        √ó
                    </button>
                </div>

                <div className={styles.content}>
                    {/* Th√¥ng tin c∆° b·∫£n v·ªÅ t√∫i m√°u */}
                    <div className={styles.section}>
                        <h3>Th√¥ng tin t√∫i m√°u</h3>
                        <div className={styles.infoGrid}>
                            <div className={styles.infoItem}>
                                <label>Nh√≥m m√°u:</label>
                                <span className={styles.bloodType}>{bagDetails.blood_type}</span>
                            </div>
                            <div className={styles.infoItem}>
                                <label>Th√†nh ph·∫ßn:</label>
                                <span>{bagDetails.component_name}</span>
                            </div>
                            <div className={styles.infoItem}>
                                <label>Th·ªÉ t√≠ch:</label>
                                <span>{bagDetails.volume_ml} ml</span>
                            </div>
                            <div className={styles.infoItem}>
                                <label>Tr·∫°ng th√°i:</label>
                                <span className={styles.status}>{bagDetails.bag_status}</span>
                            </div>
                        </div>
                    </div>

                    {/* Th√¥ng tin ng√†y th√°ng */}
                    <div className={styles.section}>
                        <h3>Th√¥ng tin th·ªùi gian</h3>
                        <div className={styles.infoGrid}>
                            <div className={styles.infoItem}>
                                <label>Ng√†y thu th·∫≠p:</label>
                                <span>{formatDate(bagDetails.collection_date)}</span>
                            </div>
                            <div className={styles.infoItem}>
                                <label>Ng√†y h·∫øt h·∫°n:</label>
                                <span>{formatDate(bagDetails.expiry_date)}</span>
                            </div>
                            <div className={styles.infoItem}>
                                <label>S·ªë ng√†y t·ª´ khi thu th·∫≠p:</label>
                                <span>{bagDetails.days_since_collection} ng√†y</span>
                            </div>
                            <div className={styles.infoItem}>
                                <label>S·ªë ng√†y c√≤n l·∫°i:</label>
                                <span>{bagDetails.days_until_expiry} ng√†y</span>
                            </div>
                        </div>
                    </div>

                    {/* T√¨nh tr·∫°ng c·∫•p b√°ch */}
                    <div className={styles.section}>
                        <h3>T√¨nh tr·∫°ng s·ª≠ d·ª•ng</h3>
                        <div className={styles.urgencyStatus}
                            style={{ color: getUrgencyColor(bagDetails.urgency_status) }}>
                            <span className={styles.urgencyIcon}>
                                {bagDetails.urgency_status === 'S·∫Øp h·∫øt h·∫°n' ? 'üö®' :
                                    bagDetails.urgency_status === 'C·∫ßn s·ª≠ d·ª•ng s·ªõm' ? '‚ö†Ô∏è' : '‚úÖ'}
                            </span>
                            {bagDetails.urgency_status}
                        </div>
                    </div>

                    {/* Th√¥ng tin ng∆∞·ªùi hi·∫øn m√°u */}
                    <div className={styles.section}>
                        <h3>Th√¥ng tin ng∆∞·ªùi hi·∫øn m√°u</h3>
                        <div className={styles.donorInfo}>
                            <div className={styles.infoItem}>
                                <label>H·ªç t√™n:</label>
                                <span>{bagDetails.donor_name}</span>
                            </div>
                            <div className={styles.infoItem}>
                                <label>Email:</label>
                                <span>{bagDetails.donor_email}</span>
                            </div>
                            {bagDetails.donor_phone && (
                                <div className={styles.infoItem}>
                                    <label>S·ªë ƒëi·ªán tho·∫°i:</label>
                                    <span>{bagDetails.donor_phone}</span>
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                <div className={styles.footer}>
                    <button onClick={onClose} className={styles.cancelButton}>
                        ƒê√≥ng
                    </button>
                    {showConfirmButton && (
                        <button
                            onClick={() => onConfirm(bagDetails)}
                            className={styles.confirmButton}
                        >
                            X√°c nh·∫≠n c·∫•p ph√°t
                        </button>
                    )}
                </div>
            </div>
        </div>
    );
};

export default BloodBagDetails;
